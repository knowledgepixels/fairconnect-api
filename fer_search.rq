#+ summary: Full-text search for FAIR-Enabling Resources
#+ endpoint: https://nanopub.sdsc.edu/repo/empty
#+ method: GET
###+ defaults:
###+   - service: https://nanopub.sdsc.edu/

prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix np: <http://www.nanopub.org/nschema#>
prefix npa: <http://purl.org/nanopub/admin/>
prefix npx: <http://purl.org/nanopub/x/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix dct: <http://purl.org/dc/terms/>
prefix fip: <https://w3id.org/fair/fip/terms/>
prefix search: <http://www.openrdf.org/contrib/lucenesail#>

select distinct ?np ?description ?label ?date (group_concat(distinct ?type; separator=" ") as ?types) ?qualifier (group_concat(distinct ?community; separator=" ") as ?communities) (max(?score) as ?maxscore) where {

 #optional {<x:> <x:> ?_service_iri}
  bind(<https://nanopub.sdsc.edu/> as ?service)
  bind(iri(concat(str(?service), "repo/text")) as ?text_service)

  service ?text_service {
    graph npa:graph {
      ?np rdfs:label ?label ;
          npa:hasValidSignatureForPublicKey ?pubkey ;
          dct:created ?date .
      filter(str(?date) > "2022")
      filter exists { ?np npx:hasNanopubType ?fsr_type . values ?fsr_type { fip:FAIR-Enabling-Resource fip:FAIR-Supporting-Resource } }
      filter not exists { ?np npx:hasNanopubType npx:ExampleNanopub . }
      ?np npx:hasNanopubType ?type .
      filter not exists { ?npx npx:invalidates ?np ; npa:hasValidSignatureForPublicKey ?pubkey . }
    }
    ?np search:matches [
      search:query ?_query ;
      search:property rdfs:label ;
      search:score ?score ;
      search:snippet ?snippet ] .
  }

  bind(iri(concat(str(?service), "repo/full")) as ?full_service)
  optional { service ?full_service {
    graph npa:graph {
      ?np np:hasAssertion ?a .
      ?np np:hasPublicationInfo ?i .
    }
    graph ?a {
      ?thing rdfs:comment ?description .
    }
    graph ?i {
      ?np npx:introduces ?thing .
    }
  } }
  
  bind(iri(concat(str(?service), "repo/type/", sha256("http://purl.org/nanopub/x/qualifies"))) as ?qualifies_service)
  optional { service ?qualifies_service {
    graph npa:graph {
      ?qualification_np np:hasAssertion ?qa ;
        npa:hasValidSignatureForPublicKey ?qpubkey .
      filter not exists { ?qualification_npx npx:invalidates ?qualification_np ; npa:hasValidSignatureForPublicKey ?qpubkey . }
    }
    graph <https://w3id.org/np/RAhzbiJ3o0S7iEiLDmVWVqIDRFvWnlubnk9QYY2PnksdI#assertion> {
      ?qpubkeys npx:hasPublicKey ?qpubkey .
    }
    graph ?qa {
      ?qualifier npx:qualifies ?np .
    }
  } }

  bind(iri(concat(str(?service), "repo/type/", sha256("http://purl.org/nanopub/x/disapprovesOf"))) as ?disappr_service)
  filter not exists { service ?disappr_service {
    graph npa:graph {
      ?disapproval_np np:hasAssertion ?da ;
        npa:hasValidSignatureForPublicKey ?dpubkey .
      filter not exists { ?disapproval_npx npx:invalidates ?disapproval_np ; npa:hasValidSignatureForPublicKey ?dpubkey . }
    }
    graph <https://w3id.org/np/RAhzbiJ3o0S7iEiLDmVWVqIDRFvWnlubnk9QYY2PnksdI#assertion> {
      ?qpubkeys npx:hasPublicKey ?dpubkey .
    }
    graph ?da {
      ?disapprover npx:disapprovesOf ?np .
    }
  } }

  bind(iri(concat(str(?service), "repo/type/", sha256("https://w3id.org/fair/fip/terms/FIP-Declaration"))) as ?fip_service)
  optional { service ?fip_service {
    graph npa:graph {
      ?decl_np np:hasAssertion ?decl_a ;
        npa:hasValidSignatureForPublicKey ?decl_pubkey .
      filter not exists { ?decl_npx npx:invalidates ?decl_np ; npa:hasValidSignatureForPublicKey ?decl_pubkey . }
    }
    graph ?decl_a {
      ?decl a fip:FIP-Declaration .
      # ----
      # not really needed but seems to make query faster:
      values ?use { fip:declares-current-use-of fip:declares-planned-use-of fip:declares-planned-development-of fip:declares-planned-replacement-of }
      ?decl ?use ?thing .
      # ----
      ?decl fip:declared-by ?community .
    }
  } }

}
group by ?np ?description ?label ?date ?qualifier
order by desc(?maxscore)
